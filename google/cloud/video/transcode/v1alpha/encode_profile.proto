// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cloud.video.transcode.v1alpha;

import "google/protobuf/timestamp.proto";

option go_package = "google.golang.org/genproto/googleapis/cloud/video/transcode/v1alpha;transcode";
option java_multiple_files = true;
option java_package = "com.google.cloud.video.transcode.v1alpha";


// An encode profile.
message EncodeProfile {
  message Encode {
    // (Optional) Output video width.<br/>
    // If not specified:<br/>
    // 1. if video_height is specified, video_width = video_height *
    // input_video_width / input_video_height.<br/>
    // 2. if video_height is not sepcified, video_width = input_video_width.
    int32 video_width = 1;

    // (Optional) Output video height.<br/>
    // If not specified:<br/>
    // 1. if video_width is specified, video_height = video_width *
    // input_video_height / input_video_width.<br/>
    // 2. if video_width is not sepcified, video_height = input_video_height.
    int32 video_height = 2;

    // (Optional) The fitting method to use in case of both width and height are
    // specified. See below for details.<br/>
    // If fitting = "pad" then the image will
    // be padded to fit the specified size. Pixels will NOT be stretched.
    // Depending on the input size, encoder will either pad from left/right
    // (pillarbox) or pad from top/bottom (letterbox).<br/>
    // If fitting = "crop" then the inputimage will be cropped to match the
    // output image. Encoder will match the width or the height and crop the
    // other. The decision to use width or height is based on which selection
    // will result in the minimum pixel loss.<br/>
    // If fitting = "stretch" then the image will be stretched to fit the
    // specified size. This is almost never the desired behavior unless you know
    // what you are doing. It is included for special case support.
    string video_fitting = 3;

    // Output video codec.<br/>
    // The following video codecs are supported:<br/>
    // h264: H.264 - Baseline, Main and High profiles, 8 bit, YUV-420.<br/>
    // h265: H.265 - Baseline, Main and High profiles, 8 bit, YUV-420.
    string video_codec = 4;

    // Output video bitrate in terms of bits per second.
    int32 video_bitrate = 5;

    // (Optional) Output video pixel format, can be either yuv420p or
    // yuv422p. Default to yuv420p.
    string video_pixel_format = 6;

    // (Optional) GOP frame count.
    int32 video_gop_size = 7;

    // (Optional) Specify the consecutive b-frames in the GOP structure for main
    // and high profiles. Possible values are 0 (default), 1, 2 and 3.
    int32 video_bframes = 8;

    // (Optional) Codec profile. Can be baseline, main or high. Default to
    // high.
    string video_profile = 9;

    // (Optional) true or false. Default to false. Enable/disable caption
    // embedding in output file. For example, this flag enables embedding of
    // 608/708 captions in H264 SEI packets.
    bool video_embedded_caption = 10;

    // Output audio bitrate in terms of bits per second.
    int32 audio_bitrate = 11;

    // Output audio codec.<br/>
    // The following audio codecs are supported:<br/>
    // aac: AAC - LC and HE profiles.<br/>
    // ac3: AC3 - Dolby Digital.<br/>
    // mp3: MP3.<br/>
    // Default to aac.
    string audio_codec = 12;

    // (Optional) Audio codec profile. Can be HE or LC.
    string audio_profile = 13;

    // (Optional) Audio channel count. Must be one of 2, 6 or 8. Default to 2.
    int32 audio_channels = 14;

    // (Optional) Audio sample format.
    int32 audio_sampling_format = 15;

    // (Optional) Sampling rate, defaults to 44100.
    int32 audio_sampling_rate = 16;

    // (Optional) Audio volume level
    float audio_level = 17;
  }

  message Format {
    // Type of packaging.<br/>
    // The following format types are supported.<br/>
    // hls: HTTP Live Streaming. Packager can be fmp4 for fragmented MP4
    // segments and ts for MPEG-TS packaged segments.<br/>
    // dash: MPEG-DASH fragments.<br/>
    // mp4: Standard MP4 packaged VOD.
    string type = 1;

    // (Optional) Version of the packaging protocol, e.g. HLS version 3.
    string version = 2;

    // (Optional) For HLS, this can be ts or fmp4.
    string packager = 3;

    // (Optional) Duration of each fragment in seconds.
    int32 fragment_duration = 4;
  }

  // The resource name of the encode profile.<br/>
  // Encode profile names have the form
  // `projects/{project_number}/encodeProfiles/{encode_profile_id}`.<br/>
  // The name is ignored when creating an encode profile.
  string name = 1;

  // The descriptive name for this encode profile.
  string display_name = 2;

  // Encode renditions.
  repeated Encode encodes = 3;

  // Encode Output formats.
  repeated Format formats = 4;

  // Encode profile create time.
  // Output only.
  google.protobuf.Timestamp create_time = 5;

  // Encode profile update time.
  // Output only.
  google.protobuf.Timestamp update_time = 6;
}
