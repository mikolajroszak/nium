// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.cloud.datahub.v2;

import "google/api/annotations.proto";
import "google/cloud/datahub/v2/file_spec.proto";
import "google/protobuf/any.proto";

option cc_enable_arenas = true;
option go_package = "google.golang.org/genproto/googleapis/cloud/datahub/v2;datahub";
option java_multiple_files = true;
option java_package = "com.google.cloud.datahub";


// The spec for TABLE type entry.
message TableSpec {
  // The unified GoogleSQL-like schema applicable for all table entries.
  TableSchema table_schema = 1;

  // The list of data sources that back the table entry.
  repeated TableSource table_source = 2;
}

// The data source that backs the table entry.
message TableSource {
  // Unique id of the table source within the entry. By default it is '',
  // when there is only one source.
  string source_id = 1;

  // The type of the table source.
  TableSourceType source_type = 2;

  // Spec for different table sources.
  oneof source_spec {
    // Spec for table view.
    ViewSpec view_spec = 4;

    // Spec for Bigquery table.
    BigQueryTableSpec bigquery_spec = 7;
  }
}

// Spec for table view.
message ViewSpec {
  // The dialect of the query.
  enum QueryDialect {
    // Default unknown.
    QUERY_DIALECT_UNKNOWN = 0;

    // GoogleSQL view.
    GOOGLESQL = 1;

    // View defined in BigQuery dialect.
    BIGQUERY = 2;
  }

  // The query to define the table view.
  string view_query = 1;

  // The dialect the view query is using.
  QueryDialect dialect = 2;

  // Tables queried in the view_query.
  repeated string underlying_tables = 4;
}

// Spec for BigQuery table.
message BigQueryTableSpec {
  // Info for external table defined in BigQuery.
  // The BigQuery external tables should be modeled directly by their data
  // sources such as GCS, TRIX in the long run. We keep it here for EAP.
  message ExternalTableInfo {
    // File paths used by BigQuery external table.
    repeated string file_paths = 1;
  }

  // Details on the BigQuery source.
  oneof details {
    // BigQuery external table info.
    ExternalTableInfo external_table_info = 1;
  }
}

// The unified schema to represent table structure.
message TableSchema {
  // The list of columns.
  repeated Column column = 1;
}

// Info about column or fields in struct/proto.
message Column {
  // GoogleSql supported types.
  enum Type {
    // default unknown type.
    TYPE_UNKNOWN = 0;

    // int32
    TYPE_INT32 = 1;

    // int64
    TYPE_INT64 = 2;

    // uint32
    TYPE_UINT32 = 3;

    // uint64
    TYPE_UINT64 = 4;

    // boolean
    TYPE_BOOL = 5;

    // float
    TYPE_FLOAT = 6;

    // double
    TYPE_DOUBLE = 7;

    // string
    TYPE_STRING = 8;

    // bytes
    TYPE_BYTES = 9;

    // date
    TYPE_DATE = 10;

    // structure
    TYPE_STRUCT = 17;

    // timestamp
    TYPE_TIMESTAMP = 19;

    // time
    TYPE_TIME = 20;

    // datetime
    TYPE_DATETIME = 21;

    // Geography (go/googlesql_geography)
    TYPE_GEOGRAPHY = 22;
  }

  // The name of the column.
  string name = 1;

  // The fully qualified name to locate the column, e.g., a.b.c. It is
  // constructed by concatenating column/field names from the top level using
  // '.'.
  // This field is set by datahub when users want to retrieve the table schema,
  // not intended for users to set. It can be used as the key
  // to retrieve details/options/annotations on the column/field.
  string fully_qualified_name = 2;

  // type of the column/field.
  Type type = 3;

  // set true if colum/field type is repeated (i.e., TYPE_ARRAY).
  // The reason for doing this instead of using TYPE_ARRAY is
  // to avoid a nest level limit for handling BQ schema.
  bool is_repeated = 4;

  // Detailed description for columns and fields.
  string description = 5;

  // populated for STRUCT type.
  repeated Column fields = 6;
}

// The type of a table source.
enum TableSourceType {
  // Default unknown type.
  TABLE_SOURCE_TYPE_UNKNOWN = 0;

  // Table view.
  VIEW = 2;

  // Bigquery native table.
  BIGQUERY_TABLE = 5;
}
