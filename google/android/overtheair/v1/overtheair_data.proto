// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.android.overtheair.v1;

import "google/protobuf/timestamp.proto";
import "google/type/timeofday.proto";

option go_package = "google.golang.org/genproto/googleapis/android/overtheair/v1;overtheair";
option java_multiple_files = true;
option java_outer_classname = "OverTheAirDataProto";
option java_package = "com.google.android.overtheair.v1";
option csharp_namespace = 'Google.Android.OverTheAir.V1';


// KeyValue message for OTA API protos.
message KeyValue {
  // Key.
  string key = 1;

  // Value.
  string value = 2;
}

// A deployment.
message Deployment {
  // Output only. The name of the deployment.
  string name = 1;

  // The description of the deployment.
  string description = 2;

  // Output only. The deployment categories.
  repeated string categories = 3;

  // Output only. The build prefix.
  repeated string build_prefixes = 4;

  // Output only. The deployment fingerprint substring. Typically used to
  // enforce test-keys or release-keys.
  repeated string fingerprint_substrings = 5;

  // Output only. The minimum API level that this device has ever supported.
  int32 api_level = 6;

  // Output only. The Product ID code for the deployment device.
  string apfe_product_id = 7;

  // Output only. User's access level to this deployment.
  UserAccessLevel user_access_level = 8;

  // Output only. The timestamp when the deployment was updated.
  google.protobuf.Timestamp update_time = 9;

  // Output only. More details of a deployment. This field should only
  // be returned by the server when returning the deployment.
  DeploymentDetails details = 100;
}

// Level of access to deployments.
message UserAccessLevel {
  // The user can have different access levels to a deployment.
  enum AccessLevel {
    // Not specified.
    ACCESS_LEVEL_UNSPECIFIED = 0;

    // The user can view but not modify the deployment.
    READ_ONLY_ACCESS = 1;

    // The user can modify test groups but not the production group in this
    // deployment.
    GROUPS_ONLY_ACCESS = 2;

    // The user can modify both test groups and the production group in this
    // deployment.
    FULL_ACCESS = 3;

    // The user has no access to this deployment.
    NO_ACCESS = 4;
  }

  // User's email address.
  string user_email = 1;

  // User's access level to the deployment.
  AccessLevel access_level = 2;
}

// Details about the deployment that includes updates and groups.
// All of this information is read only.
message DeploymentDetails {
  // The update history of the deployment.
  repeated UpdateHistory updates = 1;

  // The groups in detailed view.
  // Note that `GroupDetails` will not contain `members` due to size issues.
  // If you require `members`, we recommend that you load them on-demand, per
  // `Group`.
  repeated Group groups = 2;

  // Deployment configs.
  repeated Config configs = 3;

  // The deployment version.
  VersionTag version_tag = 100;
}

// An update history entry.  This information is read-only.
message UpdateHistory {
  // Represents a transaction.  As an example, if a group was updated, it might
  // look like this:
  //
  //     HistoryData {
  //         value = group "security updates"
  //         sub_data = HistoryData {
  //             value = applied ota configurations
  //             sub_data = HistoryData {
  //                 value = config 1
  //             }, HistoryData {
  //                 value = config 2
  //             }
  //         }
  //     }
  message HistoryData {
    // The content of a particular change or a header if sub_data exists.
    string value = 1;

    // If there were multiple changes, this contains each of them.
    repeated HistoryData sub_data = 2;
  }

  // The timestamp when the update occurred.
  google.protobuf.Timestamp update_time = 1;

  // The user's email address when the change was made.
  string user = 2;

  // The updates that were made by this user at this time.
  repeated HistoryData content = 3;
}

// A group that is associated with multiple OTA configs.
message Group {
  // Required. The name of the group. It must contain only letters, numbers, and
  // underscores.
  string name = 1;

  // Optional. Whether or not the group is enabled. Defaults to false.
  bool enabled = 2;

  // Optional. The group will bypass the rollout schedule. Defaults to false.
  bool bypass_rollout_schedule = 3;

  // Output only. More details of a group. This field should only
  // be returned by the server when returning the group.
  GroupDetails details = 100;
}

// Details of a group, including associated OTA configurations.
// All of this information is read only.
message GroupDetails {
  // The associated configs of the group.
  repeated string configs = 1;

  // Members of this group.
  repeated GroupMember members = 2;

  // The group version.
  VersionTag version_tag = 100;
}

// A group member that is assigned to a group.
message GroupMember {
  // Required. The name of the member.
  string name = 1;

  // Output only. More details of the group member, such as check-in history.
  GroupMemberDetails details = 100;
}

// Details about a group member, such as the hardware ID and the registration
// time.  All of this information is read only.
message GroupMemberDetails {
  // A hardware ID belonging to the device.
  message HardwareID {
    // The formatted ID, for example, imei:XYZ.
    string id = 1;
  }

  // Message for properties of the current device OTA.
  message OtaProperties {
    // Name of the OTA.
    string name = 1;

    // URL of the OTA.
    string url = 2;
  }

  // A single device check-in.
  message Checkin {
    // Device's build properties sent with check-in.
    message AndroidBuildProperties {
      // Full build ID.
      string id = 1;

      // Product = ro.build.product, for example, shamu.
      string product = 2;

      // Radio.
      string radio = 3;

      // Bootloader.
      string bootloader = 4;
    }

    // The timestamp when check-in happened.
    google.protobuf.Timestamp checkin_time = 1;

    // Build properties.
    AndroidBuildProperties build_properties = 2;
  }

  // Last check-in information. Contains more information than the
  // corresponding item in the `checkin_history` field.
  message LastCheckin {
    // Base check-in properties.
    Checkin checkin = 1;

    // Hash of the result sent back to the device, if any.
    string digest = 2;

    // Locale.
    string locale = 3;

    // Extra build properties such as ro.build.[device|client]
    repeated KeyValue extra_build_properties = 4;
  }

  // List of hardware IDs (imei, meid, serial, etc.) associated with the device.
  repeated HardwareID hardware_id = 1;

  // The timestamp when the device first registered.
  google.protobuf.Timestamp register_time = 2;

  // Hardware name, for example, shamu.
  string hardware_name = 3;

  // Current OTA name.
  OtaProperties current_ota = 4;

  // Check-in history.
  repeated Checkin checkins = 5;

  // Last check-in.
  LastCheckin last_checkin = 6;
}

// Chart information for a single measure.
// Output only.
message Chart {
  // The report resolution. The smallest resolution is one hour, but for
  // larger reports (that is, 6 months), it is better to use higher values to
  // save bandwidth. The user probably doesn't care about hourly trends when
  // looking at a year's worth of data.
  enum Resolution {
    // Not specified.
    RESOLUTION_UNSPECIFIED = 0;

    // 1 hour.
    RESOLUTION_ONE_HOUR = 1;

    // 2 hours.
    RESOLUTION_TWO_HOURS = 2;

    // 6 hours.
    RESOLUTION_SIX_HOURS = 3;

    // 24 hours.
    RESOLUTION_TWENTY_FOUR_HOURS = 4;
  }

  // Type of chart data.
  enum Type {
    // Not specified.
    TYPE_UNSPECIFIED = 0;

    // Count of active devices with a given property, that is, on a specific
    // build.
    TYPE_ACTIVE_DEVICE_COUNTS = 1;

    // Count of devices in a certain update stage, that is, downloading the
    // update.
    TYPE_UPDATE_STATE_COUNTS = 2;
  }

  // The name of the report. For update reports, it is "update-" plus
  // the full name of the OTA update.
  string name = 1;

  // Type of chart data.
  Type type = 2;

  // Report details. Includes the actual data.
  ChartDetails details = 100;
}

// Chart details.
// Output only.
message ChartDetails {
  // Data for a single line in the graph.
  message ChartLine {
    // Label for this data stream.
    string label = 1;

    // Timestamp of the start of this data.
    google.protobuf.Timestamp start_time = 2;

    // Timestamp of the end of this data.
    google.protobuf.Timestamp end_time = 3;

    // Data resolution.
    int32 resolution_hours = 4;

    // Data corresponding to labels in the parent Report proto.
    // data[0] is the oldest and data[end] is the most recent.
    repeated int64 data = 5;

    // Indicates that this bucket is an aggregate of multiple smaller buckets.
    bool is_aggregate = 6;
  }

  // The chart data.
  repeated ChartLine chart_line = 1;
}

// A configuration of a deployment.
message Config {
  // The update description sent to the device.
  message UpdateDescription {
    // The update description text.
    string description = 1;

    // The update description title.
    string title = 2;

    // The dialog message of the update.
    string dialog_message = 3;

    // The post success message of the update.
    // Requires API level 14 or greater.
    string post_success_message = 4;

    // The post failure message of the update.
    // Requires API level 14 or greater.
    string post_failure_message = 5;
  }

  // The update description based on the locale.
  message LocalizedUpdateDescription {
    // The locales to match the locales of the device.
    repeated string locales = 1;

    // The update description that is sent to the device.
    UpdateDescription update_description = 2;
  }

  // The off-peak update limitation.
  message OffPeakUpdate {
    // Number of days to try to download the update in the off-peak window.
    enum UpdateOffPeakDays {
      // Not specified.
      OFF_PEAK_DAYS_UNSPECIFIED = 0;

      // 1 day.
      OFF_PEAK_UPDATE_ONE_DAY = 1;

      // 3 days.
      OFF_PEAK_UPDATE_THREE_DAYS = 2;

      // 7 days.
      OFF_PEAK_UPDATE_SEVEN_DAYS = 3;

      // 14 days.
      OFF_PEAK_UPDATE_FOURTEEN_DAYS = 4;

      // 30 days.
      OFF_PEAK_UPDATE_THIRTY_DAYS = 5;
    }

    // For Off-peak OTAs, whether the off-peak window is only applicable for
    // cellular operator or it can be applied to all networks.
    enum CellularOperatorRestriction {
      // Not specified.
      OPERATOR_RESTRICTED_UNSPECIFIED = 0;

      // The off-peak window is applicable for the cellular operator only.
      CELLULAR_OPERATOR_RESTRICTED = 1;

      // The off-peak window is applicable for all networks.
      ALL_NETWORK_ALLOWED = 2;
    }

    // Off-peak time window to download the update.
    // Requires GMSCore 6.7.72 or later.
    TimeWindow update_off_peak_window = 1;

    // Optional.  When the value is `OFF_PEAK_DAYS_UNSPECIFIED`, the server
    // will use a default value of `OFF_PEAK_UPDATE_ONE_DAY`.
    // Requires GMSCore 6.5 or later.
    UpdateOffPeakDays update_off_peak_days = 2;

    // Optional. When the value is not specified, the server will use a default
    // value of `ALL_NETWORK_ALLOWED`.
    // Requires GMSCore 6.7.72 or later.
    CellularOperatorRestriction update_operator_restriction = 3;
  }

  // Includes or excludes certain patterns.
  message IncludeExclude {
    // A rule of includes or excludes.
    oneof include_exclude {
      // Included pattern.
      string include = 1;

      // Excluded pattern.
      string exclude = 2;
    }
  }

  // The roll-out step component.
  message RolloutStep {
    // The roll-out timestamp.
    google.protobuf.Timestamp rollout_time = 1;

    // Fraction denominated by percentage between 0.00 and 100.00.
    float fraction = 2;
  }

  // The upgrade urgency mode.
  enum UrgencyMode {
    // Not specified.
    MODE_UNSPECIFIED = 0;

    // Recommend upgrade.  The user will be prompted to download and install
    // the update.
    RECOMMENDED = 2;

    // Mandatory upgrade.  The update will download automatically but the user
    // will be prompted to start the install.
    MANDATORY = 3;

    // Automatic upgrade.  The update will be downloaded and installed
    // automatically.
    AUTOMATIC = 4;
  }

  // Download will avoid mobile network for this period after update is
  // available.
  enum WifiOnlyTime {
    // Not specified.
    WIFI_ONLY_TIME_UNSPECIFIED = 0;

    // Not blocked.
    NONE = 1;

    // Two hour window.
    TWO_HOURS = 2;

    // Six hour window.
    SIX_HOURS = 3;

    // Twenty four hour window.
    TWENTY_FOUR_HOURS = 4;

    // Three days window.
    THREE_DAYS = 5;

    // Ten day window.
    TEN_DAYS = 6;

    // Ninety day window.
    NINETY_DAYS = 7;

    // Forever window.
    FOREVER = 8;

    // One hundred and twenty days window.
    ONE_HUNDRED_TWENTY_DAYS = 9;
  }

  // The space requirement in bytes.
  enum SpaceNeed {
    // Not specified.
    SPACE_NEED_UNSPECIFIED = 0;

    // 100 MB.
    ONE_HUNDRED_MB = 1;

    // 150 MB.
    ONE_HUNDRED_AND_FIFTY_MB = 2;

    // 250 MB.
    TWO_HUNDRED_AND_FIFTY_MB = 3;

    // 500 MB.
    FIVE_HUNDRED_MB = 4;
  }

  // Output only. The name of the config.
  // Note that this is the unique identifier for `Config` objects and will be
  // generated by the server when a new `Config` is created.
  string name = 1;

  // Optional. The title of the config.
  string title = 2;

  // Optional. The description of the config.
  string description = 3;

  // Required. The default UI text used when the device locale doesn't match any
  // locales specified in `localized_update_descriptions`.
  UpdateDescription default_update_description = 15;

  // Optional. A list of localized update descriptions, which take priority
  // over `default_update_description` if one of them matches the device locale.
  repeated LocalizedUpdateDescription localized_update_descriptions = 4;

  // Optional. The update urgency that dictates how a user will be
  // prompted.
  // If left unspecified, a default of `RECOMMENDED` will be used.
  UrgencyMode urgency_mode = 16;

  // Optional.  Defaulted to `TWENTY_FOUR_HOURS` if left as
  // `WIFI_ONLY_TIME_UNSPECIFIED`.
  WifiOnlyTime wifi_only_time = 17;

  // Optional. The installation time window for the OTA.
  TimeWindow update_maintenance_window = 18;

  // Optional. Whether the update is sensitive to battery levels.
  // Requires GMSCore v6.0.32 or later.
  bool update_battery_awareness = 19;

  // Optional. The off-peak update object.
  OffPeakUpdate off_peak_update = 6;

  // Optional. The possible included/excluded countries.
  IncludeExclude country_restriction = 7;

  // Optional. The possible included/excluded mobile networks.
  IncludeExclude mobile_network_restriction = 8;

  // Optional. The possible included/excluded device build property restriction.
  IncludeExclude device_build_property_restriction = 20;

  // Optional. Indicates if the update is required during the setup wizard.
  // Defaults to false.
  bool update_required_setup = 9;

  // Optional. The minimal space requirement. When the value is `UNSPECIFIED`,
  // the server will use a default value of `FIVE_HUNDRED_MB`.
  // Requires GMSCore 6.1.11 or later.
  SpaceNeed minimal_space_required = 10;

  // One of `immediate_release` or `rollout_steps` is required.
  // Whether the update should be released immediately.
  // If this is true, `rollout_steps` should be unset.
  bool immediate_release = 11;

  // One of `rollout_steps` or `immediate_release` is required.
  // RolloutSteps must be in order: both time_ms and fraction should
  // be non-decreasing. The last step should have fraction == 100.
  repeated RolloutStep rollout_steps = 12;

  // Optional. Whether or not the check-in interval on a device should be
  // lowered prior to the OTA.  This allows a config to be published without
  // any packages so a device can check in more frequently to poll for the
  // upcoming OTA (even if no packages are ready yet).
  bool lower_checkin_interval = 13;

  // Optional. Marks the update as a security update. This is passed to the
  // device to coordinate the display of the correct update message. That is, to
  // display the text "applying security update" rather than "applying system
  // update".  Requires API level 22 or later and GMSCore 9.4 or later.
  bool security_update = 14;

  // Output only. More details of a config. This should only
  // be returned by the server when returning the config.
  ConfigDetails details = 100;
}

// A time window that defines start time of a day and stop time of a day.
message TimeWindow {
  // The window start time.
  google.type.TimeOfDay start_time = 1;

  // The window stop time.
  google.type.TimeOfDay stop_time = 2;
}

// Details of a config.
message ConfigDetails {
  // The config installation post-conditions.
  repeated Condition post_conditions = 1;

  // The defined packages of this config.
  // Important: the order of packages is important. If a device matches
  // multiple sets of pre-conditions, the last matching package wins and will
  // be applied to the device.
  repeated PackageConfig packages = 2;

  // The associated groups of this config.
  repeated string groups = 3;

  // Output only. The config version.
  VersionTag version_tag = 100;
}

// A package config.
message PackageConfig {
  // The OTA `download_type`. For `CUSTOM` type, a
  // `custom_download_url` must also be provided.
  message DownloadOptions {
    // Download type to serve the OTA file through Google.
    DownloadType download_type = 1;

    // Download URL to serve the OTA file through non-Google
    // servers. Must be provided only with `CUSTOM` download_type.
    string custom_download_url = 2;

    // Output only.  The current URL that devices use to download the package.
    // This value will match `custom_download_url` when `download_type` is
    // CUSTOM.  Note this is informational only and may change.  It should not
    // be stored or used off of the device.
    string current_download_url = 3;
  }

  // The type of download for OTA packages.
  enum DownloadType {
    // Not specified.
    DOWNLOAD_TYPE_UNSPECIFIED = 0;

    // Through Google servers.
    NORMAL = 1;

    // Through Google's specific VIP for zero-cost OTAs.
    ZERO_COST = 2;

    // Through an external server. `custom_download_url` should be set along
    // with this option.
    CUSTOM = 3;
  }

  // The name of the package.
  string package_name = 1;

  // Download options for package.
  DownloadOptions download_options = 5;

  // If set, this will be the capability used to select the APN of the
  // cellular network for downloading the update on a metered network.
  // If not, no special APN will be selected for download.
  // Note that GMSCore must hold the correct system permissions to select this
  // APN, and the carrier generally has to make sure traffic is whitelisted.
  // For this reason, this option is typically coupled with the
  // `ZERO_COST` download type.
  string zero_cost_apn_capability = 6;
}

// A package in the OTA config.
message Package {
  // Output only. The name of the package stored.
  // Note that this is the unique identifier for `Package` objects and will be
  // generated by the server when a new `Package` is created.
  string name = 1;

  // The title of the package; that is, the display name.
  string title = 2;

  // More details of the package. This field is read only.
  PackageDetails details = 100;
}

// Details of an OTA package.
message PackageDetails {
  // The state of package uploading.
  //
  // After the package file is fully transferred, a
  // [package][google.android.overtheair.v1.Package] will be created and the
  // server will start processing the file to read package properties from it.
  // The upload state will be set to `IN_PROGRESS` until the processing is done.
  // After processing, the upload state will be set to `SUCCESS` or `FAILURE`.
  enum PackageUploadState {
    // Unspecified.
    PACKAGE_UPLOAD_STATE_UNSPECIFIED = 0;

    // Upload succeeded.
    SUCCESS = 1;

    // Upload failed. Most likely it's because the package is not valid (due to
    // various reasons, for example, unable to unzip the file).
    FAILURE = 2;

    // The package is still being processed.
    IN_PROGRESS = 3;
  }

  // The package size in bytes.
  int64 size_bytes = 1;

  // The original filename that is uploaded.
  string original_filename = 2;

  // The package pre-conditions.
  repeated Condition pre_conditions = 3;

  // The package post-conditions.
  repeated Condition post_conditions = 4;

  // The package properties.
  PackageProperties properties = 5;

  // The link to download the package directly from Google.
  // For Dashboard / Console use.
  string web_download_url = 6;

  // The time the package was updated.
  google.protobuf.Timestamp update_time = 7;

  // The upload state of the package.
  PackageUploadState upload_state = 8;

  // The error occurred when uploading the package. The field will only be set
  // when the upload_state is `FAILURE`.
  string upload_error = 10;

  // Whether the package is approved in APFE.
  bool approved = 9;

  // The package version.
  VersionTag version_tag = 100;
}

// The attributes of an OTA package.
message PackageProperties {
  // The type of package in this OTA.
  enum PackageType {
    // Unspecified.
    PACKAGE_TYPE_UNSPECIFIED = 0;

    // File-based OTA.
    FILE = 1;

    // Block-based OTA.
    BLOCK = 2;

    // A/B OTA.
    AB = 3;
  }

  // OTA package type, such as block based.
  PackageType type = 1;

  // OTA required cache size in bytes.
  int64 required_cache = 2;

  // Whether the OTA package is a downgrade package.
  bool downgrade = 3;

  // Whether the OTA package will apply the wipe action.
  bool wipe = 4;

  // The specification of the property files used in streaming OTA.
  string streaming_property_files = 5;
}

// A condition defines a list of condition rule values.
message Condition {
  // The condition name.
  string name = 1;

  // The condition values.
  repeated string values = 2;
}

// Defines a version object.
message VersionTag {
  // The version string.
  string version = 1;
}
