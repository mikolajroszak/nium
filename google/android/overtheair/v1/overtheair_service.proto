// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.android.overtheair.v1;

import "google/android/overtheair/v1/overtheair_data.proto";
import "google/android/overtheair/v1/overtheair_service_messages.proto";
import "google/api/annotations.proto";

option go_package = "google.golang.org/genproto/googleapis/android/overtheair/v1;overtheair";
option java_multiple_files = true;
option java_outer_classname = "OverTheAirServiceProto";
option java_package = "com.google.android.overtheair.v1";
option csharp_namespace = 'Google.Android.OverTheAir.V1';


// ## Service for Android Over the Air(OTA).
//
// ## ----  deployment related rpcs              ---
service OverTheAirService {
  // Gets a [Deployment][google.android.overtheair.v1.Deployment].
  // Returns `NOT_FOUND` if the deployment does not exist.
  rpc GetDeployment(GetDeploymentRequest) returns (Deployment) {
    option (google.api.http) = { get: "/v1/{name=deployments/*}" };
  }

  // Lists [deployments][google.android.overtheair.v1.Deployment].
  rpc ListDeployments(ListDeploymentsRequest) returns (ListDeploymentsResponse) {
    option (google.api.http) = { get: "/v1/deployments" };
  }

  // Updates a [deployment][google.android.overtheair.v1.Deployment].
  rpc UpdateDeployment(UpdateDeploymentRequest) returns (Deployment) {
    option (google.api.http) = { put: "/v1/{name=deployments/*}" body: "*" };
  }

  // Gets a [package][google.android.overtheair.v1.Package].
  // Returns `NOT_FOUND` if the matching path does not exist.
  rpc GetPackage(GetPackageRequest) returns (Package) {
    option (google.api.http) = { get: "/v1/{name=deployments/*/packages/**}" };
  }

  // Lists [packages][google.android.overtheair.v1.Package].
  rpc ListPackages(ListPackagesRequest) returns (ListPackagesResponse) {
    option (google.api.http) = { get: "/v1/{name=deployments/*}/packages" };
  }

  // Deletes a [package][google.android.overtheair.v1.Package].
  // Returns `NOT_FOUND` if the matching path does not exist.
  rpc DeletePackage(DeletePackageRequest) returns (DeletePackageResponse) {
    option (google.api.http) = { delete: "/v1/{name=deployments/*/packages/**}" };
  }

  // Updates a [package][google.android.overtheair.v1.Package].
  // Returns `INVALID_ARGUMENT` if any field other than title is modified.
  rpc UpdatePackage(UpdatePackageRequest) returns (Package) {
    option (google.api.http) = { put: "/v1/{name=deployments/*/packages/**}" body: "*" };
  }

  // Creates a config, and returns the new
  // [Config][google.android.overtheair.v1.Config].
  rpc CreateConfig(CreateConfigRequest) returns (Config) {
    option (google.api.http) = { post: "/v1/{name=deployments/*}/configs" body: "config" };
  }

  // Gets a [config][google.android.overtheair.v1.Config] view.
  // Returns `NOT_FOUND` if the matching path does not exist.
  rpc GetConfig(GetConfigRequest) returns (Config) {
    option (google.api.http) = { get: "/v1/{name=deployments/*/configs/*}" };
  }

  // Lists [configs][google.android.overtheair.v1.Config] of a deployment.
  // Returns `NOT_FOUND` if the matching path does not exist.
  rpc ListConfigs(ListConfigsRequest) returns (ListConfigsResponse) {
    option (google.api.http) = { get: "/v1/{name=deployments/*}/configs" };
  }

  // Deletes a [config][google.android.overtheair.v1.Config].
  // Returns `NOT_FOUND` if the matching path does not exist.
  rpc DeleteConfig(DeleteConfigRequest) returns (DeleteConfigResponse) {
    option (google.api.http) = { delete: "/v1/{name=deployments/*/configs/*}" };
  }

  // Updates a [config][google.android.overtheair.v1.Config].
  // Returns `INVALID_ARGUMENT` if the name of the config is non-empty and does
  // not equal the existing name.
  rpc UpdateConfig(UpdateConfigRequest) returns (Config) {
    option (google.api.http) = { put: "/v1/{name=deployments/*/configs/*}" body: "*" };
  }

  // Creates a group, and returns the new
  // [Group][google.android.overtheair.v1.Group].
  rpc CreateGroup(CreateGroupRequest) returns (Group) {
    option (google.api.http) = { post: "/v1/{name=deployments/*}/groups" body: "group" };
  }

  // Gets a [group][google.android.overtheair.v1.Group].
  // Returns `NOT_FOUND` if the group does not exist.
  rpc GetGroup(GetGroupRequest) returns (Group) {
    option (google.api.http) = { get: "/v1/{name=deployments/*/groups/*}" };
  }

  // Lists [groups][google.android.overtheair.v1.Group] of a deployment.
  // Returns `NOT_FOUND` if the matching path does not exist.
  rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse) {
    option (google.api.http) = { get: "/v1/{name=deployments/*}/groups" };
  }

  // Deletes a [group][google.android.overtheair.v1.Group].
  // Returns `NOT_FOUND` if the group does not exist.
  rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse) {
    option (google.api.http) = { delete: "/v1/{name=deployments/*/groups/*}" };
  }

  // Updates a [group][google.android.overtheair.v1.Group].
  // Returns INVALID_ARGUMENT if the name of the group is non-empty and does
  // not equal the existing name.
  rpc UpdateGroup(UpdateGroupRequest) returns (Group) {
    option (google.api.http) = { put: "/v1/{name=deployments/*/groups/*}" body: "*" };
  }

  // Disables the defined [groups][google.android.overtheair.v1.Group].
  // Returns `NOT_FOUND` if the matching path does not exist.
  rpc DisableGroups(DisableGroupsRequest) returns (DisableGroupsResponse) {
    option (google.api.http) = { post: "/v1/{name=deployments/*}/groups:disable" body: "*" };
  }

  // Enables the defined [groups][google.android.overtheair.v1.Group].
  // Returns `NOT_FOUND` if the matching path does not exist.
  rpc EnableGroups(EnableGroupsRequest) returns (EnableGroupsResponse) {
    option (google.api.http) = { post: "/v1/{name=deployments/*}/groups:enable" body: "*" };
  }

  // Creates a group member and returns the new
  // [GroupMember][google.android.overtheair.v1.GroupMember]. If the device is
  // already under other groups, it will be removed from those groups and added
  // to the group that's specified in the request.
  rpc CreateGroupMember(CreateGroupMemberRequest) returns (GroupMember) {
    option (google.api.http) = { post: "/v1/{name=deployments/*/groups/*}/members" body: "group_member" };
  }

  // Creates group members in a specific group.  If any device is in other
  // groups, it will be removed from those groups and added to the group that's
  // specified in the request.
  rpc CreateGroupMembers(CreateGroupMembersRequest) returns (CreateGroupMembersResponse) {
    option (google.api.http) = { post: "/v1/{name=deployments/*/groups/*}/members:batchCreate" body: "*" };
  }

  // Gets a [group member][google.android.overtheair.v1.GroupMember].
  // Returns `NOT_FOUND` if the matching path does not exist.
  rpc GetGroupMember(GetGroupMemberRequest) returns (GroupMember) {
    option (google.api.http) = { get: "/v1/{name=deployments/*/groups/*/members/*}" };
  }

  // Lists [group members][google.android.overtheair.v1.GroupMember].
  // Returns `NOT_FOUND` if the matching path does not exist.
  rpc ListGroupMembers(ListGroupMembersRequest) returns (ListGroupMembersResponse) {
    option (google.api.http) = { get: "/v1/{name=deployments/*/groups/*}/members" };
  }

  // Deletes a [group member][google.android.overtheair.v1.GroupMember].
  // Returns `NOT_FOUND` if the matching path does not exist.
  rpc DeleteGroupMember(DeleteGroupMemberRequest) returns (DeleteGroupMemberResponse) {
    option (google.api.http) = { delete: "/v1/{name=deployments/*/groups/*/members/*}" };
  }

  // Deletes group members in a group.  If any member does not it exist, it
  // will be ignored.
  rpc DeleteGroupMembers(DeleteGroupMembersRequest) returns (DeleteGroupMembersResponse) {
    option (google.api.http) = { post: "/v1/{name=deployments/*/groups/*}/members:batchDelete" body: "*" };
  }

  // Gets a [group chart][google.android.overtheair.v1.Chart].
  // Returns `NOT_FOUND` if the matching path does not exist.
  rpc GetGroupChart(GetGroupChartRequest) returns (Chart) {
    option (google.api.http) = { get: "/v1/{name=deployments/*/groups/*/charts/*}" };
  }

  // Lists [group charts][google.android.overtheair.v1.Chart].
  // Returns `NOT_FOUND` if the matching path does not exist.
  rpc ListGroupCharts(ListGroupChartsRequest) returns (ListGroupChartsResponse) {
    option (google.api.http) = { get: "/v1/{name=deployments/*/groups/*}/charts" };
  }

  // Lists configs of the group. Returns `NOT_FOUND` if the matching path
  // does not exist.
  rpc ListGroupConfigs(ListGroupConfigsRequest) returns (ListGroupConfigsResponse) {
    option (google.api.http) = { get: "/v1/{name=deployments/*/groups/*}/configs" };
  }

  // Update the configs under a group. Returns `NOT_FOUND` if the matching group
  // or config does not exist.
  rpc UpdateGroupConfigs(UpdateGroupConfigsRequest) returns (UpdateGroupConfigsResponse) {
    option (google.api.http) = { put: "/v1/{name=deployments/*/groups/*}/configs" body: "*" };
  }

  // Disables all enabled groups that have the specified config.
  // Returns `NOT_FOUND` if the matching path does not exist.
  rpc DisableAllEnabledGroupsOfConfig(DisableAllEnabledGroupsOfConfigRequest) returns (DisableAllEnabledGroupsOfConfigResponse) {
    option (google.api.http) = { post: "/v1/{name=deployments/*/configs/*}:disable" body: "*" };
  }

  // Lists packages of the config. Returns `NOT_FOUND` if the matching path does
  // not exist.
  rpc ListConfigPackages(ListConfigPackagesRequest) returns (ListConfigPackagesResponse) {
    option (google.api.http) = { get: "/v1/{name=deployments/*/configs/*}/packages" };
  }

  // Update the packages under the config. Returns `NOT_FOUND` if the matching
  // path does not exist.
  rpc UpdateConfigPackages(UpdateConfigPackagesRequest) returns (UpdateConfigPackagesResponse) {
    option (google.api.http) = { put: "/v1/{name=deployments/*/configs/*}/packages" body: "*" };
  }

  // Lists all the configs that use the specified package.
  rpc ListConfigsUsingPackage(ListConfigsUsingPackageRequest) returns (ListConfigsUsingPackageResponse) {
    option (google.api.http) = { get: "/v1/{name=deployments/*/packages/**}:batchGet" };
  }
}
